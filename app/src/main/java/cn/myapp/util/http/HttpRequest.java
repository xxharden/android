/**
 * Generated by SFJ 1.0.0.558
 * Copyright (C) 2014 imoco.org
 */

package cn.myapp.util.http;

import android.app.Activity;
import android.content.Context;
import android.os.Message;
import android.support.v4.app.Fragment;


import com.gqh.mystudio.application.BamsApplication;

import org.apache.http.HttpResponse;
import org.apache.http.client.CookieStore;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.CoreConnectionPNames;
import org.apache.http.util.EntityUtils;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;


public class HttpRequest extends Task {
	private HttpManager.E_HTTP_TYPE mHttp_TYPE = HttpManager.E_HTTP_TYPE.POST;
	private Map<String, String> mParams;
	private Map<String, File> mFiles;
	private String mUrl;

	public String getmUrl() {
		return mUrl;
	}

	public void setmUrl(String mUrl) {
		this.mUrl = mUrl;
	}

	public HttpRequest(String url, String _loadingMsg, HttpManager.E_HTTP_TYPE http_TYPE,
			HttpCallBack callback) {
		mUrl = url;
		mCallback = callback;
		if (mCallback instanceof Activity) {
			mContext = (Context) mCallback;
		} else if (mCallback instanceof Fragment) {
			mContext = ((Fragment) callback).getActivity();
		}

		mHttp_TYPE = http_TYPE;
		loadingMsg = _loadingMsg;

		if (mainHandler == null) {
			mainHandler = new HttpHandler();
		}
		// 在此处检查网络是否异常，异常设置 isValidNetWork = true;
		// 执行一些启动dialog ，loading等操作
		// if (!HttpConnUtil.checkNetworkConnectionState(mContext)) {
		// mainHandler.sendEmptyMessage(7);
		// return;
		// }

		// progressDialog
		initLoading();
		mainHandler.sendEmptyMessage(6);

	}

	public HttpRequest(String url, String _loadingMsg, HttpManager.E_HTTP_TYPE http_TYPE,
			Map<String, String> params, HttpCallBack callback) {
		this(url, _loadingMsg, http_TYPE, callback);
		mParams = params;
	}

	public HttpRequest(String url, String _loadingMsg, HttpManager.E_HTTP_TYPE http_TYPE,
			Map<String, String> params, Map<String, File> files,
			HttpCallBack callback) {
		this(url, _loadingMsg, http_TYPE, callback);
		mParams = params;
		mFiles = files;
	}

	public String getUrl() {
		return mUrl;
	}

	public void runTask() {
		System.out.println("runTask#mUrl=" + mUrl);

		if (mHttp_TYPE == HttpManager.E_HTTP_TYPE.GET) {
			getRequest();
		} else {
			postRequest();
		}
	}

	void getRequest() {
		try {
			// 新建HttpGet对象
			HttpGet httpGet = new HttpGet(mUrl);
			// 获取HttpClient对象
			DefaultHttpClient httpClient = new DefaultHttpClient();
			httpClient.getParams().setParameter(
					CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);
			httpClient.getParams().setParameter(
					CoreConnectionPNames.SO_TIMEOUT, 1000 * 60 * 10);
			// 获取HttpResponse实例
			HttpResponse httpResp;
			// 第一次一般是还未被赋值，若有值则将SessionId发给服务器
			String PHPSESSID = BamsApplication.getInstance().getPHPSESSID();
			if (null != PHPSESSID) {
				httpGet.setHeader("Cookie", "PHPSESSID=" + PHPSESSID);
			}

			httpResp = httpClient.execute(httpGet);
			// 判断是够请求成功
			if (httpResp.getStatusLine().getStatusCode() == 200) {

				CookieStore mCookieStore = httpClient.getCookieStore();

				List<Cookie> cookies = mCookieStore.getCookies();
				if (!cookies.isEmpty()) {
					for (int i = cookies.size(); i > 0; i--) {
						Cookie cookie = cookies.get(i - 1);
						if (cookie.getName().equalsIgnoreCase("PHPSESSID")) {
							// 这里是读取Cookie['PHPSESSID']的值存在静态变量中，保证每次都是同一个值
							BamsApplication.getInstance().setPHPSESSID(
									cookie.getValue());
						}
					}
				}
				// 获取返回的数据
				String result = EntityUtils.toString(httpResp.getEntity(),
						"UTF-8");
				System.out.println("HttpGet方式请求成功，返回数据如下：");
				System.out.println("result=" + result);
				Message msg = new Message();
				msg.what = 3;
				msg.obj = result;
				mainHandler.sendMessage(msg);
			} else {
				System.out.println("HttpGet方式请求失败");
				Message msg = new Message();
				msg.what = 4;
				mainHandler.sendMessage(msg);
			}
		} catch (Exception e) {
			System.out.println("HttpGet方式请求失败");
			Message msg = new Message();
			msg.what = 4;
			mainHandler.sendMessage(msg);
		}
	}

	void postRequest2() {
		DataOutputStream outStream = null;
		HttpURLConnection conn = null;
		try {
			String BOUNDARY = java.util.UUID.randomUUID().toString();
			String PREFIX = "--", LINEND = "\r\n";
			String MULTIPART_FROM_DATA = "multipart/form-data";
			String CHARSET = "UTF-8";
			URL uri = new URL(mUrl);
			conn = (HttpURLConnection) uri.openConnection();
			conn.setReadTimeout(10 * 1000); // 缓存的最长时间
			conn.setConnectTimeout(10 * 1000);
			conn.setDoInput(true);// 允许输入
			conn.setDoOutput(true);// 允许输出
			conn.setUseCaches(false); // 不允许使用缓存
			conn.setRequestMethod("POST");
			conn.setRequestProperty("connection", "keep-alive");
			conn.setRequestProperty("Charsert", "UTF-8");
			conn.setRequestProperty("Content-Type", MULTIPART_FROM_DATA
					+ ";boundary=" + BOUNDARY);
			if (mParams != null) {
				// 首先组拼文本类型的参数
				StringBuilder sb = new StringBuilder();
				for (Map.Entry<String, String> entry : mParams.entrySet()) {
					sb.append(PREFIX);
					sb.append(BOUNDARY);
					sb.append(LINEND);
					sb.append("Content-Disposition: form-data; name=\""
							+ entry.getKey() + "\"" + LINEND);
					sb.append("Content-Type: text/plain; charset=" + CHARSET
							+ LINEND);
					sb.append("Content-Transfer-Encoding: 8bit" + LINEND);
					sb.append(LINEND);
					sb.append(entry.getValue());
					sb.append(LINEND);
				}
				outStream = new DataOutputStream(conn.getOutputStream());
				outStream.write(sb.toString().getBytes());
			}

			// 发送文件数据
			if (mFiles != null) {
				for (Map.Entry<String, File> file : mFiles.entrySet()) {
					StringBuilder sb1 = new StringBuilder();
					sb1.append(PREFIX);
					sb1.append(BOUNDARY);
					sb1.append(LINEND);
					sb1.append("Content-Disposition: form-data; name=\""
							+ file.getKey() + "\"; filename=\""
							+ file.getValue().getName() + "\"" + LINEND);
					sb1.append("Content-Type: application/octet-stream; charset="
							+ CHARSET + LINEND);
					sb1.append(LINEND);
					outStream.write(sb1.toString().getBytes());

					InputStream is = new FileInputStream(file.getValue());
					byte[] buffer = new byte[1024];
					int len = 0;
					while ((len = is.read(buffer)) != -1) {
						outStream.write(buffer, 0, len);
					}

					is.close();
					outStream.write(LINEND.getBytes());
				}
			}
			// 请求结束标志
			byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINEND).getBytes();
			outStream.write(end_data);
			outStream.flush();
			// 得到响应码
			int res = conn.getResponseCode();
			InputStream in = conn.getInputStream();
			StringBuilder sb2 = new StringBuilder();
			if (res == 200) {
				int ch;
				while ((ch = in.read()) != -1) {
					sb2.append((char) ch);
				}

				System.out.println("result=" + sb2.toString());
				Message msg = new Message();
				msg.what = 3;
				msg.obj = sb2.toString();
				mainHandler.sendMessage(msg);
			} else {
				System.out.println("HttpGet方式请求失败");
				Message msg = new Message();
				msg.what = 4;
				mainHandler.sendMessage(msg);
			}

		} catch (Exception e) {
			System.out.println("HttpGet方式请求失败");
			Message msg = new Message();
			msg.what = 4;
			mainHandler.sendMessage(msg);
		} finally {
			try {
				outStream.close();
				conn.disconnect();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	void postRequest() {
		String end = "\r\n";
		String twoHyphens = "--";
		String boundary = "*****";
		String BOUNDARY = java.util.UUID.randomUUID().toString();
		String PREFIX = "--", LINEND = "\r\n";
		String CHARSET = "UTF-8";

		try {
			URL url = new URL(mUrl);
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			/* 允许Input、Output，不使用Cache */
			con.setDoInput(true);
			con.setDoOutput(true);
			con.setUseCaches(false);
			/* 设置传送的method=POST */
			con.setRequestMethod("POST");
			/* setRequestProperty */
			con.setRequestProperty("Connection", "Keep-Alive");
			con.setRequestProperty("Charset", "UTF-8");
			con.setRequestProperty("Content-Type",
					"multipart/form-data;boundary=" + boundary);

			/* 设置DataOutputStream */
			DataOutputStream ds = new DataOutputStream(con.getOutputStream());
			ds.writeBytes(twoHyphens + boundary + end);

			if (mParams != null) {
				// 首先组拼文本类型的参数
				StringBuilder sb = new StringBuilder();
				for (Map.Entry<String, String> entry : mParams.entrySet()) {
					sb.append(PREFIX);
					sb.append(BOUNDARY);
					sb.append(LINEND);
					sb.append("Content-Disposition: form-data; name=\""
							+ entry.getKey() + "\"" + LINEND);
					sb.append("Content-Type: text/plain; charset=" + CHARSET
							+ LINEND);
					sb.append("Content-Transfer-Encoding: 8bit" + LINEND);
					sb.append(LINEND);
					sb.append(entry.getValue());
					sb.append(LINEND);
				}
				ds.write(sb.toString().getBytes());
			}

			// 发送文件数据
			if (mFiles != null) {
				for (Map.Entry<String, File> file : mFiles.entrySet()) {
					ds.writeBytes("Content-Disposition: form-data; "
							+ "name=\"" + file.getKey() + "\";filename=\""
							+ file.getValue().getName() + "\"" + end);
					ds.writeBytes(end);

					/* 取得文件的FileInputStream */
					FileInputStream fStream = new FileInputStream(file
							.getValue().getPath());
					/* 设置每次写入1024bytes */
					int bufferSize = 1024;
					byte[] buffer = new byte[bufferSize];
					int length = -1;
					/* 从文件读取数据至缓冲区 */
					while ((length = fStream.read(buffer)) != -1) {
						/* 将资料写入DataOutputStream中 */
						ds.write(buffer, 0, length);
					}
					ds.writeBytes(end);
					ds.writeBytes(twoHyphens + boundary + twoHyphens + end);
					/* close streams */
					fStream.close();
					ds.flush();
				}
			}

			// 得到响应码
			int res = con.getResponseCode();
			InputStream in = con.getInputStream();
			StringBuilder sb2 = new StringBuilder();
			if (res == 200) {
				int ch;
				while ((ch = in.read()) != -1) {
					sb2.append((char) ch);
				}

				System.out.println("result=" + sb2.toString());
				Message msg = new Message();
				msg.what = 3;
				msg.obj = sb2.toString();
				mainHandler.sendMessage(msg);
			} else {
				System.out.println("HttpGet方式请求失败");
				Message msg = new Message();
				msg.what = 4;
				mainHandler.sendMessage(msg);
			}

			/* 关闭DataOutputStream */
			ds.close();
			con.disconnect();
		} catch (Exception e) {
			System.out.println("HttpGet方式请求失败");
			Message msg = new Message();
			msg.what = 4;
			mainHandler.sendMessage(msg);

		}
	}

}
